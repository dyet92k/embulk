plugins {
    id "java"
    id "java-library"
    id "maven-publish"
    id "jacoco"
    id "com.jfrog.bintray" version "1.8.4" apply false
    id "org.ajoberstar.grgit" version "4.0.1"
}

def getRevision = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        workingDir "${rootDir}"
        commandLine "git", "rev-parse", "HEAD"
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
def revision = getRevision()

allprojects {  // Applies all projects including the root project as well.
    apply plugin: 'java'

    group = 'org.embulk'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    test {
        maxHeapSize = '1536m'
        forkEvery = 1  // test processes are forked by each test class (default is 0)
    }
}

version = "0.10.4-SNAPSHOT"

description = 'Embulk is an open-source, plugin-based bulk data loader to scale and simplify data management across heterogeneous data stores. It can collect and ship any kinds of data in high throughput with transaction control.'

ext {
    jrubyVersion = '9.1.15.0'
    summary = 'Embulk, a plugin-based parallel bulk data loader'
}

def subprojectNamesReleasedInMavenCentral = [
    "embulk-api",
    "embulk-spi",
]

def subprojectNamesReleasedInBintray = [
    "embulk-core",
    "embulk-deps-buffer",
    "embulk-deps-cli",
    "embulk-deps-guess",
    "embulk-deps-config",
    "embulk-deps-maven",
    "embulk-deps-timestamp",
    "embulk-standards",
    "embulk-junit4",
]

def subprojectNamesReleased = subprojectNamesReleasedInMavenCentral + subprojectNamesReleasedInBintray

configure(subprojects.findAll { subprojectNamesReleased.contains(it.name) }) {
    apply plugin: "java-library"
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    // TODO: Enable SpotBugs instead of FindBugs which was used in Embulk until v0.9.17.

    // The version needs to be declared here, not in each build.gradle, so that "bintray" can get the value.
    version = "${rootProject.version}"
    project.ext.setProperty("revision", revision)

    java {
        withJavadocJar()
        withSourcesJar()
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    tasks.withType(Test) {
        systemProperties System.properties.findAll { it.key.startsWith("org.embulk") }
        testLogging {
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }

    tasks.withType(Checkstyle) {
        reports {
            // Not to skip up-to-date checkstyles.
            outputs.upToDateWhen { false }
        }
    }

    checkstyle {
        toolVersion '8.7'
        configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
        configProperties = [
            'checkstyle.config.path': file("${projectDir}/config/checkstyle")
        ]
        ignoreFailures = false
        maxWarnings = 0  // https://github.com/gradle/gradle/issues/881
    }

    javadoc {
        options {
            locale = 'en_US'
            encoding = 'UTF-8'
        }
    }

    jar {
        manifest {
            attributes 'Implementation-Title': project.name,
                       'Implementation-Version': project.version,
                       'Implementation-Vendor-Id': project.group,
                       'Specification-Title': project.name,
                       'Specification-Version': project.version
        }
    }
}

configure(subprojects.findAll { subprojectNamesReleasedInBintray.contains(it.name) }) {
    apply plugin: "com.jfrog.bintray"

    task testsJar(type: Jar, dependsOn: classes) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    artifacts {
        archives testsJar
    }

    publishing {
        publications {
            maven(MavenPublication) {
                if (project.version.endsWith("-SNAPSHOT")) {
                    version = "${project.version}-${revision}"
                }

                from components.java
                // javadocJar and sourcesJar are added by java.withJavadocJar() and java.withSourcesJar() above.
                // See: https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaPluginExtension.html
                artifact testsJar
            }
        }
    }

    bintray {  // Defines "bintrayUpload" properties for Java subprojects.
        // NOTE: Define Gradle properties "bintray_user" and "bintray_api_key" to upload the releases to Bintray.
        // ~/.gradle/gradle.properties would help defining.
        user = project.hasProperty('bintray_user') ? bintray_user : ''
        key = project.hasProperty('bintray_api_key') ? bintray_api_key : ''

        publications = ["maven"]

        dryRun = false
        publish = true

        pkg {
            userOrg = 'embulk'
            repo = 'maven'
            name = 'embulk'
            desc = 'Embulk, a plugin-based parallel bulk data loader'
            websiteUrl = "https://www.embulk.org"
            issueTrackerUrl = 'https://github.com/embulk/embulk/issues'
            vcsUrl = 'https://github.com/embulk/embulk.git'
            licenses = ['Apache-2.0']
            labels = [ "embulk" ]
            publicDownloadNumbers = true
            version {
                name = project.version
            }
        }
    }
}

configure(subprojects.findAll { subprojectNamesReleasedInMavenCentral.contains(it.name) }) {
    apply plugin: "signing"

    jar {
        from rootProject.file("LICENSE")
    }

    javadoc {
        options {
            overview = "src/main/html/overview.html"
            links "https://docs.oracle.com/javase/8/docs/api/"
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = "${project.group}"
                artifactId = "${project.name}"

                from components.java
                // javadocJar and sourcesJar are added by java.withJavadocJar() and java.withSourcesJar() above.
                // See: https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaPluginExtension.html

                pom {  // https://central.sonatype.org/pages/requirements.html
                    name = "${project.name}"
                    afterEvaluate { project ->
                        // "description" is declared in subproject's build.gradle. It needs to be configured after evaluation.
                        description = "${project.description}"
                    }
                    url = "https://www.embulk.org/"

                    licenses {
                        license {
                            // http://central.sonatype.org/pages/requirements.html#license-information
                            name = "The Apache License, Version 2.0"
                            url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }

                    developers {
                        developer {
                            name = "Sadayuki Furuhashi"
                            email = "frsyuki@gmail.com"
                        }
                        developer {
                            name = "Muga Nishizawa"
                            email = "muga.nishizawa@gmail.com"
                        }
                        developer {
                            name = "Satoshi Akama"
                            email = "satoshiakama@gmail.com"
                        }
                        developer {
                            name = "Dai MIKURUBE"
                            email = "dmikurube@treasure-data.com"
                        }
                        developer {
                            name = "Shinichi Ishimura"
                            email = "shiketaudonko41@gmail.com"
                        }
                        developer {
                            name = "Roman Shtykh"
                            email = "rshtykh@yahoo.com"
                        }
                    }

                    scm {
                        connection = "scm:git:git://github.com/embulk/embulk.git"
                        developerConnection = "scm:git:git@github.com:embulk/embulk.git"
                        url = "https://github.com/embulk/embulk"
                    }
                }
            }
        }

        repositories {
            maven {  // publishMavenPublicationToMavenCentralRepository
                name = "mavenCentral"
                if (project.version.endsWith("-SNAPSHOT")) {
                    url "https://oss.sonatype.org/content/repositories/snapshots"
                } else {
                    url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                }
                credentials {
                    username = project.hasProperty("sonatype_username") ? sonatype_username : ""
                    password = project.hasProperty("sonatype_password") ? sonatype_password : ""
                }
            }
        }
    }

    signing {
        sign publishing.publications.maven
    }
}

repositories {
    mavenCentral()
}

configurations {
    embed
}

dependencies {
    implementation project(':embulk-core')
    implementation project(':embulk-standards')

    // Logback and jansi are included only in the executable package. (jansi for logback colors to work on Windows.)
    implementation 'ch.qos.logback:logback-classic:1.1.3'
    implementation 'org.fusesource.jansi:jansi:1.11'

    embed project(':embulk-deps-buffer')

    embed project(':embulk-deps-config')

    embed project(':embulk-deps-guess')

    embed(project(':embulk-deps-maven')) {
        exclude group: 'org.apache.commons', module: 'commons-lang3'  // Included in embulk-core.
        exclude group: 'com.google.guava', module: 'guava'  // Included in embulk-core.
    }

    embed project(':embulk-deps-cli')

    embed project(':embulk-deps-timestamp')
}

def listEmbedDependencies = { rootModuleName, prefix ->
    def list = []
    configurations.embed.resolvedConfiguration.firstLevelModuleDependencies.each { firstLevelDependency ->
        if (firstLevelDependency.moduleName == rootModuleName) {
            firstLevelDependency.allModuleArtifacts.each { requiredArtifact ->
                list.add(prefix + requiredArtifact.file.name)
            }
        }
    }
    if (list.isEmpty()) {
        throw new GradleException('Failed to collect libraries to embed: no dependencies found for: "' + rootModuleName + '"')
    }
    return String.join(' ', list)
}

// Standard "jar" task to build a JAR with dependency JAR resources embedded.
jar {
    dependsOn ":embulk-api:jar",
              ":embulk-core:jar",
              ":embulk-deps-buffer:jar",
              ":embulk-deps-cli:jar",
              ":embulk-deps-config:jar",
              ":embulk-deps-guess:jar",
              ":embulk-deps-maven:jar",
              ":embulk-deps-timestamp:jar",
              ":embulk-standards:jar"

    // Expands all dependencies including "embulk-core" and "embulk-standards"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Includes COPYING.
    from "${rootProject.projectDir}/COPYING"

    // Includes all hidden dependency librarires under "embed" into "lib/".
    into('/lib') {
        from configurations.embed
    }

    // NOTE: This 'Implementation-Version' in the manifest is referred to provide the Embulk version at runtime.
    // See also: embulk-core/src/main/java/org/embulk/EmbulkVersion.java
    manifest {
        attributes 'Implementation-Title': 'embulk',
                   'Implementation-Version': project.version,
                   'Implementation-Vendor-Id': project.group,
                   'Specification-Title': 'embulk',
                   'Specification-Version': project.version,
                   'Embulk-Resource-Class-Path-Buffer': listEmbedDependencies('embulk-deps-buffer', '/lib/'),
                   'Embulk-Resource-Class-Path-Config': listEmbedDependencies('embulk-deps-config', '/lib/'),
                   'Embulk-Resource-Class-Path-Guess': listEmbedDependencies('embulk-deps-guess', '/lib/'),
                   'Embulk-Resource-Class-Path-Maven': listEmbedDependencies('embulk-deps-maven', '/lib/'),
                   'Embulk-Resource-Class-Path-Cli': listEmbedDependencies('embulk-deps-cli', '/lib/'),
                   'Embulk-Resource-Class-Path-Timestamp': listEmbedDependencies('embulk-deps-timestamp', '/lib/'),
                   'Main-Class': 'org.embulk.cli.Main'
    }
}

task executableJar(dependsOn: "jar") {
    ext.destinationDir = file("${buildDir}/executable")
    doFirst {
        destinationDir.mkdirs()
    }
    ext.destination = file("${destinationDir}/embulk-${project.version}.jar")
    doLast {
        destination.write("")
        destination.append("\n: <<END_OF_EMBULK_SELFRUN_BATCH_PART\r\n")
        destination.append(file("embulk-core/src/main/bat/selfrun.bat").readBytes())
        destination.append("\r\nEND_OF_EMBULK_SELFRUN_BATCH_PART\r\n\n")
        destination.append(file("embulk-core/src/main/sh/selfrun.sh").readBytes())
        destination.append(jar.outputs.files.singleFile.readBytes())
        destination.setExecutable(true)
    }
}

task releaseCheck {
    doFirst {
        if (rootProject.version.endsWith("-SNAPSHOT")) {
            throw new GradleException("Not for release. The version in build.gradle is SNAPSHOT: ${rootProject.version}")
        }
        def grgit = org.ajoberstar.grgit.Grgit.open(dir: "${rootProject.projectDir}")
        if (!grgit.status().clean) {
            throw new GradleException("Not for release. The working tree is dirty.")
        }
        def described = grgit.describe(commit: "HEAD").toString().trim()
        if (described != "v${rootProject.version}") {
            throw new GradleException("Not for release. git-describe returned a name different from the version in build.gradle: ${described} v.s. v${rootProject.version}")
        }
        if (described.contains("-")) {
            // HEAD may not be tagged with annotation properly.
            throw new GradleException("Not for release. git-describe returned a name with a hyphen: ${described}")
        }
        // TODO: Revisit if we would check the format of tag annotation.
    }
    doLast {
        println "Ready. Run 'release' task."
    }
}

task release {
    dependsOn "releaseCheck"
    dependsOn "executableJar"
    subprojectNamesReleasedInMavenCentral.each { subprojectName ->
        dependsOn ":${subprojectName}:publishMavenPublicationToMavenCentralRepository"
        tasks.findByPath(":${subprojectName}:publishMavenPublicationToMavenCentralRepository").mustRunAfter(":releaseCheck")
    }
    subprojectNamesReleasedInBintray.each { subprojectName ->
        dependsOn ":${subprojectName}:bintrayUpload"
        tasks.findByPath(":${subprojectName}:bintrayUpload").mustRunAfter(":releaseCheck")
    }
}
